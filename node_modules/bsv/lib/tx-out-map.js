/**
 * Transaction Output Map
 * ======================
 *
 * A map from a transaction hash and output number to that particular output.
 * Note that the map is from the transaction *hash*, which is the value that
 * occurs in the blockchain, not the id, which is the reverse of the hash. The
 * TxOutMap is necessary when signing a transction to get the script and value
 * of that output which is plugged into the sighash algorithm.
 */
'use strict';

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TxOutMap = void 0;

var _struct = require("./struct");

var _txOut = require("./tx-out");

class TxOutMap extends _struct.Struct {
  constructor() {
    let map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();
    super({
      map
    });
  }

  toJSON() {
    const json = {};
    this.map.forEach((txOut, label) => {
      json[label] = txOut.toHex();
    });
    return json;
  }

  fromJSON(json) {
    Object.keys(json).forEach(label => {
      this.map.set(label, _txOut.TxOut.fromHex(json[label]));
    });
    return this;
  }

  set(txHashBuf, txOutNum, txOut) {
    const label = txHashBuf.toString('hex') + ':' + txOutNum;
    this.map.set(label, txOut);
    return this;
  }

  get(txHashBuf, txOutNum) {
    const label = txHashBuf.toString('hex') + ':' + txOutNum;
    return this.map.get(label);
  }

  setTx(tx) {
    const txhashhex = tx.hash().toString('hex');
    tx.txOuts.forEach((txOut, index) => {
      const label = txhashhex + ':' + index;
      this.map.set(label, txOut);
    });
    return this;
  }

}

exports.TxOutMap = TxOutMap;