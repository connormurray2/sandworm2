/**
 * Version
 * =======
 *
 * This data structure is used to specify details about what version of the
 * p2p network is supported by this or other nodes.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Version = void 0;

var _bw = require("./bw");

var _constants = require("./constants");

var _struct = require("./struct");

var _varInt = require("./var-int");

const Constants = _constants.Constants.Default;

class Version extends _struct.Struct {
  constructor() {
    let versionBytesNum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Constants.Msg.versionBytesNum;
    let servicesBuf = arguments.length > 1 ? arguments[1] : undefined;
    let timeBn = arguments.length > 2 ? arguments[2] : undefined;
    let addrRecvServicesBuf = arguments.length > 3 ? arguments[3] : undefined;
    let addrRecvIpAddrBuf = arguments.length > 4 ? arguments[4] : undefined;
    let addrRecvPort = arguments.length > 5 ? arguments[5] : undefined;
    let addrTransServicesBuf = arguments.length > 6 ? arguments[6] : undefined;
    let addrTransIpAddrBuf = arguments.length > 7 ? arguments[7] : undefined;
    let addrTransPort = arguments.length > 8 ? arguments[8] : undefined;
    let nonceBuf = arguments.length > 9 ? arguments[9] : undefined;
    let userAgentVi = arguments.length > 10 ? arguments[10] : undefined;
    let userAgentBuf = arguments.length > 11 ? arguments[11] : undefined;
    let startHeightNum = arguments.length > 12 ? arguments[12] : undefined;
    let relay = arguments.length > 13 ? arguments[13] : undefined;
    super({
      versionBytesNum,
      servicesBuf,
      timeBn,
      addrRecvServicesBuf,
      addrRecvIpAddrBuf,
      addrRecvPort,
      addrTransServicesBuf,
      addrTransIpAddrBuf,
      addrTransPort,
      nonceBuf,
      userAgentVi,
      userAgentBuf,
      startHeightNum,
      relay
    });
  }

  toBw(bw) {
    if (!bw) {
      bw = new _bw.Bw();
    }

    bw.writeUInt32LE(this.versionBytesNum);
    bw.write(this.servicesBuf);
    bw.writeUInt64LEBn(this.timeBn);
    bw.write(this.addrRecvServicesBuf);
    bw.write(this.addrRecvIpAddrBuf);
    bw.writeUInt16BE(this.addrRecvPort); // note BE

    bw.write(this.addrTransServicesBuf);
    bw.write(this.addrTransIpAddrBuf);
    bw.writeUInt16BE(this.addrTransPort); // note BE

    bw.write(this.nonceBuf);
    bw.write(this.userAgentVi.buf);
    bw.write(this.userAgentBuf);
    bw.writeUInt32LE(this.startHeightNum);
    bw.writeUInt8(Number(this.relay));
    return bw;
  }

  fromBr(br) {
    this.versionBytesNum = br.readUInt32LE();
    this.servicesBuf = br.read(8);
    this.timeBn = br.readUInt64LEBn();
    this.addrRecvServicesBuf = br.read(8);
    this.addrRecvIpAddrBuf = br.read(16);
    this.addrRecvPort = br.readUInt16BE(); // note BE

    this.addrTransServicesBuf = br.read(8);
    this.addrTransIpAddrBuf = br.read(16);
    this.addrTransPort = br.readUInt16BE(); // note BE

    this.nonceBuf = br.read(8);
    this.userAgentVi = new _varInt.VarInt(br.readVarIntBuf());
    this.userAgentBuf = br.read(this.userAgentVi.toNumber());
    this.startHeightNum = br.readUInt32LE();
    this.relay = Boolean(br.readUInt8());
    return this;
  }

}

exports.Version = Version;