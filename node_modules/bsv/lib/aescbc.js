/**
 * Aescbc (experimental)
 * =====================
 *
 * This is a convenience class for using Aes with Cbc. This is a low-level tool
 * that does not include authentication. You should only use this if you are
 * authenticating your data somehow else.
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Aescbc = void 0;

var _aes = require("./aes");

var _cbc = require("./cbc");

var _random = require("./random");

class Aescbc {}

exports.Aescbc = Aescbc;

Aescbc.encrypt = function (messageBuf, cipherKeyBuf, ivBuf) {
  let concatIvBuf = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  ivBuf = ivBuf || _random.Random.getRandomBuffer(128 / 8);

  const ctBuf = _cbc.Cbc.encrypt(messageBuf, ivBuf, _aes.Aes, cipherKeyBuf);

  if (concatIvBuf) {
    return Buffer.concat([ivBuf, ctBuf]);
  } else {
    return ctBuf;
  }
};

Aescbc.decrypt = function (encBuf, cipherKeyBuf) {
  let ivBuf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!ivBuf) {
    const ivBuf = encBuf.slice(0, 128 / 8);
    const ctBuf = encBuf.slice(128 / 8);
    return _cbc.Cbc.decrypt(ctBuf, ivBuf, _aes.Aes, cipherKeyBuf);
  } else {
    const ctBuf = encBuf;
    return _cbc.Cbc.decrypt(ctBuf, ivBuf, _aes.Aes, cipherKeyBuf);
  }
};